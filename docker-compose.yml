version: '2'

services:

#  java-app:
#    build: . # путь к Dockerfile приложения
#    ports:
#      - "8080:8080"
#    depends_on:
#      - pg
#      - rabbitmq
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://pg/postgres

  pg:
    image: postgres:14-alpine3.17
    container_name: pg
    environment:
      POSTGRES_PASSWORD: "postgres"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/pgsql/data

  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    networks:
      - network

volumes:
  pgdata:

networks:
  # Declare our private network.  We must declare one for the magic
  # Docker DNS to work, but otherwise its default settings are fine.
  network: {}